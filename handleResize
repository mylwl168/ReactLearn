import React, { useEffect, useRef, useState } from 'react';
import './App.css';

const App: React.FC = () => {
  const outerRef = useRef<HTMLDivElement>(null);
  const [innerHeight, setInnerHeight] = useState<number>(0);

  useEffect(() => {
    const handleResize = () => {
      if (outerRef.current) {
        const outerHeight = outerRef.current.clientHeight;
        const calculatedHeight = outerHeight * 0.9 - 60; // Example calculation
        setInnerHeight(calculatedHeight);
      }
    };

    handleResize(); // Set initial height
    window.addEventListener('resize', handleResize);

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <div ref={outerRef} className="outer-container">
      <div className="inner-container" style={{ maxHeight: `${innerHeight}px` }}>
        <p>
          这是一个内部的div，它的高度会自动计算，但不会超过外部容器的90%。超出部分不会显示省略号。这里是一些示例文本，用来演示效果。这个文本会根据内部容器的宽度和最大高度自动调整。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。再多加一些文本，以便演示更多行的情况。
        </p>
      </div>
    </div>
  );
};

export default App;
