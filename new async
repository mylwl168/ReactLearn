import React, { useState, useEffect } from 'react';

const SpinnerComponent = () => {
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const simulateHeavyWork = async () => {
      setIsLoading(true);

      // 模拟耗时操作，例如循环一个大数组
      const arr = Array.from({ length: 1000000 }, (_, index) => index + 1);
      for (const item of arr) {
        // 执行重任务的操作
        // ...

        // 模拟每次任务的间隔
        await new Promise(resolve => setTimeout(resolve, 0));
      }

      setIsLoading(false);
    };

    simulateHeavyWork();
  }, []);

  return (
    <div>
      <button disabled={isLoading}>运行重任务</button>
      {isLoading && <div>加载中...</div>}
    </div>
  );
};

export default SpinnerComponent;



import React, { useState, useEffect } from 'react';

const SpinnerComponent = () => {
  const [isLoading, setIsLoading] = useState(false);

  const runHeavyTask = async () => {
    setIsLoading(true);

    // 模拟耗时操作，例如循环一个大数组
    const arr = Array.from({ length: 1000000 }, (_, index) => index + 1);
    for (const item of arr) {
      // 执行重任务的操作
      // ...

      // 模拟每次任务的间隔
      await new Promise(resolve => setTimeout(resolve, 0));
    }

    setIsLoading(false);
  };

  return (
    <div>
      <button disabled={isLoading} onClick={runHeavyTask}>
        运行重任务
      </button>
      {isLoading && <div>加载中...</div>}
    </div>
  );
};

export default SpinnerComponent;
