const BlackBoxPlugin = {
  id: "blackBox",
  beforeDraw: (chart: any) => {
    const ctx = chart.ctx;
    const xAxis = chart.scales.x;
    if (!xAxis) return;

    const padding = 8; // 额外增加的高度
    let maxLabelHeight = 0;

    // 计算所有 label 的最大高度
    xAxis.ticks.forEach((tick: any) => {
      const textMetrics = ctx.measureText(tick.label);
      const textHeight = Math.abs(textMetrics.actualBoundingBoxAscent) + Math.abs(textMetrics.actualBoundingBoxDescent);
      maxLabelHeight = Math.max(maxLabelHeight, textHeight);
    });

    const boxHeight = maxLabelHeight + padding; // 动态计算黑框的高度
    const lineWidth = xAxis.options.grid.lineWidth || 1; // X 轴的线宽

    const left = xAxis.left;
    const right = xAxis.right;
    const top = xAxis.top + lineWidth / 2; // 让边框紧贴 X 轴
    const bottom = top + boxHeight;

    // 设置线条样式
    ctx.strokeStyle = "black";
    ctx.lineWidth = lineWidth;

    // 绘制黑色矩形边框
    ctx.strokeRect(left, top, right - left, boxHeight);

    // 计算每个标签的宽度，确保分割线均匀
    const numLabels = xAxis.ticks.length;
    const segmentWidth = (right - left) / numLabels; // 平均分配宽度

    // 绘制垂直分割线（均匀分布）
    for (let i = 1; i < numLabels; i++) {
      const x = left + i * segmentWidth;

      ctx.beginPath();
      ctx.moveTo(x, top);
      ctx.lineTo(x, bottom);
      ctx.stroke();
    }

    // **手动绘制最右侧的边框，确保其粗细正确**
    ctx.beginPath();
    ctx.moveTo(right, top);
    ctx.lineTo(right, bottom);
    ctx.stroke();
  },
};
