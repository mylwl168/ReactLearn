import React from "react";
import { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Tooltip, Title } from "chart.js";
import { Bar } from "react-chartjs-2";

ChartJS.register(BarElement, CategoryScale, LinearScale, Tooltip, Title);

const data = {
  labels: ["A", "B", "C", "D", "E"],
  datasets: [
    {
      label: "Dataset 1",
      data: [12, 19, 3, 5, 2],
      backgroundColor: "rgba(75, 192, 192, 0.6)",
    },
  ],
};

const options = {
  responsive: true,
  plugins: {
    legend: { display: false },
  },
  scales: {
    x: {
      ticks: {
        color: "black", // 确保 X 轴的文字颜色是黑色
        font: {
          weight: "bold",
        },
      },
    },
  },
};

const BlackBoxPlugin = {
  id: "blackBox",
  beforeDraw: (chart: any) => {
    const ctx = chart.ctx;
    const xAxis = chart.scales.x;
    if (!xAxis) return;

    const boxHeight = 24; // 底部矩形边框的高度
    const lineWidth = xAxis.options.grid.lineWidth || 1; // X 轴的线宽

    const left = xAxis.left;
    const right = xAxis.right;
    const top = xAxis.top + lineWidth / 2; // 让边框紧贴 X 轴
    const bottom = top + boxHeight;

    // 计算每个标签的宽度，确保分割线均匀
    const numLabels = xAxis.ticks.length;
    const segmentWidth = (right - left) / numLabels; // 平均分配宽度

    // 绘制透明填充的黑色矩形边框
    ctx.strokeStyle = "black";
    ctx.lineWidth = lineWidth;
    ctx.strokeRect(left, top, right - left, boxHeight);

    // 绘制垂直分割线（均匀分布）
    for (let i = 1; i < numLabels; i++) {
      const x = left + i * segmentWidth; // 按比例均匀计算 X 坐标

      ctx.beginPath();
      ctx.moveTo(x, top); // 从黑框顶部开始
      ctx.lineTo(x, bottom); // 画到底部
      ctx.stroke();
    }
  },
};

const BarChart = () => {
  return <Bar data={data} options={options} plugins={[BlackBoxPlugin]} />;
};

export default BarChart;
