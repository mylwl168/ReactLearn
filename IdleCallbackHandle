// 引入 React 和 requestIdleCallback 的类型定义
import React, { useEffect } from "react";
import { IdleCallbackHandle } from "@types/requestidlecallback";

// 定义一个需要循环 5 万次的操作
function loop() {
  let count = 0;
  while (count < 50000) {
    console.log(count);
    count++;
  }
}

// 定义一个 React 组件
function IdleComponent() {
  // 定义一个状态变量来存储 requestIdleCallback 的句柄
  const [handle, setHandle] = React.useState<IdleCallbackHandle | null>(null);

  // 定义一个状态变量来表示是否正在执行 loop 操作
  const [running, setRunning] = React.useState(false);

function idleCallback(deadline: IdleDeadline) {
  // 如果浏览器还有空闲时间，或者已经超时，就执行 loop 操作
  if (deadline.timeRemaining() > 0 || deadline.didTimeout) {
    loop();
    setRunning(false); // 设置 running 状态为 false
  } else {
    // 否则，再次请求 requestIdleCallback
    const newHandle = requestIdleCallback(idleCallback);
    setHandle(newHandle);
  }
}

function handleClick() {
  // 设置 running 状态为 true
  setRunning(true);
}

// 使用 useEffect 来监听 running 状态的变化，并在 running 状态变为 true 时，执行 requestIdleCallback
useEffect(() => {
  if (running) {
    const newHandle = requestIdleCallback(idleCallback, { timeout: 1000 });
    setHandle(newHandle);
  }
}, [running]);


  // 根据 running 状态来渲染不同的 JSX 元素
  return (
    <div>
      {running ? (
        <div>运行中...</div>
      ) : (
        <div>
          <button onClick={handleClick}>点击运行</button>
        </div>
      )}
    </div>
  );
}

export default IdleComponent;




// 定义一个 React 组件
function IdleComponent() {
  // 定义一个状态变量来表示是否正在执行 loop 操作
  const [running, setRunning] = React.useState(false);

  // 定义一个按钮的点击事件处理函数
  function handleClick() {
    // 设置 running 状态为 true
    setRunning(true);
  }

  // 使用 useEffect 来监视 running 状态的变化
  useEffect(() => {
    // 如果 running 状态为 true，就执行 loop 函数
    if (running) {
      loop();
    }
  }, [running]);

  // 根据 running 状态来渲染不同的 JSX 元素
  return (
    <div>
      {running ? (
        <div>运行中...</div>
      ) : (
        <div>
          <button onClick={handleClick}>点击运行</button>
        </div>
      )}
    </div>
  );
}
