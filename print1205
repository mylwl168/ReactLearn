  useEffect(() => {
    const handleFocusIn = (event: FocusEvent) => {
      const targetElement = event.target as HTMLElement;
      console.log(`Focus started on: <${targetElement.tagName.toLowerCase()} class="${targetElement.className}">`);

      // 打印冒泡链条上的所有元素及其类名
      let currentElement: HTMLElement | null = targetElement;
      console.log('Bubble chain:');
      while (currentElement) {
        console.log(`<${currentElement.tagName.toLowerCase()} class="${currentElement.className}">`);
        currentElement = currentElement.parentElement; // 移动到父节点
      }
    };

    // 监听 body 上的 focusin 事件
    document.body.addEventListener('focusin', handleFocusIn);

    return () => {
      document.body.removeEventListener('focusin', handleFocusIn);
    };
  }, []);


------


  useEffect(() => {
    const handleFocusOut = (event: FocusEvent) => {
      const nextFocusElement = event.relatedTarget as HTMLElement | null;

      // 如果焦点转移到 body、html 或 null，则强制将焦点返回到 input
      if (
        !nextFocusElement || 
        nextFocusElement.tagName === 'BODY' || 
        nextFocusElement.tagName === 'HTML'
      ) {
        console.log('Focus prevented. Returning to input.');
        inputRef.current?.focus();
      }
    };

    // 监听全局 focusout 事件
    document.addEventListener('focusout', handleFocusOut);

    return () => {
      document.removeEventListener('focusout', handleFocusOut);
    };
  }, []);
