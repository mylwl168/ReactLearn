// utils/selectorGenerator.ts
export const getChromeSelector = async (element: Locator): Promise<string> => {
  return element.evaluate((el) => {
    // 检查选择器是否在父元素下唯一
    const isUniqueInParent = (selector: string, element: Element) => {
      if (!element.parentElement) return true;
      return element.parentElement.querySelectorAll(selector).length === 1;
    };

    const getPath = (node: Element): string => {
      if (node.id) return `#${node.id}`;
      if (node === document.body) return 'body';

      const parent = node.parentElement;
      if (!parent) return node.nodeName.toLowerCase();

      // 尝试仅用类名（若类名在父元素下唯一）
      if (node.className) {
        const classes = node.className.split(/\s+/).filter(c => c.length > 0);
        if (classes.length > 0) {
          const classSelector = `.${classes.join('.')}`;
          if (isUniqueInParent(classSelector, node)) {
            return `${getPath(parent)} > ${classSelector}`;
          }
        }
      }

      // 无唯一类名时，使用标签名 + nth-child
      const siblings = Array.from(parent.children);
      const index = siblings.indexOf(node) + 1;
      const tagSelector = `${node.tagName.toLowerCase()}:nth-child(${index})`;
      return `${getPath(parent)} > ${tagSelector}`;
    };

    return getPath(el);
  });
};






// utils/selectorGenerator.ts
export const getChromeSelector = async (element: Locator): Promise<string> => {
  return element.evaluate((el) => {
    const getPath = (node: Element): string => {
      if (node.id) return `#${node.id}`;
      if (node === document.body) return 'body';

      const parent = node.parentElement;
      if (!parent) return node.nodeName.toLowerCase();

      // 获取元素在父节点中的位置（忽略文本节点）
      const siblings = Array.from(parent.children);
      const index = siblings.indexOf(node) + 1; // nth-child从1开始

      // 构建当前元素的选择器部分
      let selector = node.nodeName.toLowerCase();
      if (node.className) {
        const validClasses = node.className.split(/\s+/).filter(c => c.length > 0);
        if (validClasses.length > 0) {
          selector += `.${validClasses.join('.')}`;
        } else {
          selector += `:nth-child(${index})`;
        }
      } else {
        selector += `:nth-child(${index})`;
      }

      // 递归父节点并拼接路径
      return `${getPath(parent)} > ${selector}`;
    };

    return getPath(el);
  });
};



----

import { test, expect } from '@playwright/test';
import { getChromeSelector } from './utils/selectorGenerator';

test('获取元素选择器', async ({ page }) => {
  await page.goto('https://example.com');
  
  // 原始方式定位元素
  const element = page.locator('button >> text=Submit');
  
  // 调用函数获取选择器字符串
  const selector = await getChromeSelector(element);
  console.log('Selector:', selector); // 输出与Chrome一致的路径，如 "body > div#root > button.submit-btn"

  // 使用生成的选择器重新定位元素
  const sameElement = page.locator(selector);
  await expect(sameElement).toBeVisible();
});
